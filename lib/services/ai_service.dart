import 'dart:async';
import 'dart:math';

class AIService {
  final Random _random = Random();

  // Respuestas simuladas m√°s elaboradas y realistas
  final List<String> _sampleResponses = [
    '''Entiendo tu pregunta. Bas√°ndome en mi conocimiento, puedo decirte que este es un tema fascinante que tiene m√∫ltiples perspectivas.

Primero, es importante considerar el contexto hist√≥rico y las implicaciones actuales. Los expertos en el campo han identificado varios factores clave:

1. **Factor principal**: La evoluci√≥n constante de las tecnolog√≠as y metodolog√≠as
2. **Consideraciones secundarias**: El impacto en diferentes sectores
3. **Perspectivas futuras**: Tendencias emergentes y oportunidades

Te recomendar√≠a explorar m√°s a fondo estos aspectos para obtener una comprensi√≥n completa del tema.''',

    '''Excelente pregunta. D√©jame explic√°rtelo de manera detallada:

La respuesta a esto involucra varios componentes interrelacionados. En primer lugar, debemos entender los fundamentos b√°sicos antes de profundizar en aspectos m√°s complejos.

**Puntos clave a considerar:**

‚Ä¢ **Aspecto t√©cnico**: Las especificaciones y requisitos actuales
‚Ä¢ **Aspecto pr√°ctico**: Aplicaciones del mundo real y casos de uso
‚Ä¢ **Aspecto evolutivo**: C√≥mo ha cambiado con el tiempo

Adem√°s, es fundamental tener en cuenta las mejores pr√°cticas de la industria y las recomendaciones de expertos reconocidos en el campo.

¬øHay alg√∫n aspecto espec√≠fico sobre el que te gustar√≠a que profundice m√°s?''',

    '''Bas√°ndome en la informaci√≥n disponible, puedo ofrecerte una perspectiva integral sobre este tema:

**Contexto General**
Este es un √°rea que ha experimentado un desarrollo significativo en los √∫ltimos a√±os, con avances notables en m√∫ltiples frentes.

**An√°lisis Detallado**
1. Los fundamentos te√≥ricos proporcionan una base s√≥lida
2. Las implementaciones pr√°cticas han demostrado su efectividad
3. Las tendencias futuras sugieren un potencial considerable

**Recomendaciones**
Para aprovechar al m√°ximo este conocimiento, te sugiero:
- Investigar casos de estudio relevantes
- Experimentar con diferentes enfoques
- Mantenerte actualizado con las √∫ltimas novedades

¬øTe gustar√≠a que elabore sobre alg√∫n punto en particular?''',

    '''Interesante consulta. Voy a desglosar esto en partes m√°s manejables:

**Primera Parte: Fundamentos**
Los conceptos b√°sicos que necesitas entender incluyen las definiciones clave y los principios fundamentales que gobiernan este dominio.

**Segunda Parte: Aplicaciones Pr√°cticas**
En la pr√°ctica, esto se traduce en soluciones concretas que pueden implementarse en diversos escenarios. Las organizaciones l√≠deres han adoptado enfoques innovadores que han demostrado resultados positivos.

**Tercera Parte: Consideraciones Avanzadas**
Para usuarios m√°s experimentados, existen t√©cnicas avanzadas y optimizaciones que pueden mejorar significativamente los resultados.

**Conclusi√≥n**
La clave est√° en encontrar el equilibrio adecuado entre teor√≠a y pr√°ctica, adaptando las soluciones a tus necesidades espec√≠ficas.''',

    '''Gracias por tu pregunta. Perm√≠teme proporcionarte una respuesta comprehensiva:

**Introducci√≥n**
Este tema abarca un espectro amplio de conceptos y aplicaciones que son relevantes tanto para principiantes como para usuarios avanzados.

**Desarrollo**
Los aspectos m√°s importantes a considerar incluyen:

1. **Metodolog√≠a**: Enfoques sistem√°ticos y estructurados
2. **Herramientas**: Recursos disponibles y sus capacidades
3. **Mejores Pr√°cticas**: Est√°ndares de la industria y recomendaciones

**Ejemplos Pr√°cticos**
Algunas situaciones donde esto es particularmente √∫til:
- Escenarios empresariales complejos
- Proyectos de innovaci√≥n tecnol√≥gica
- Soluciones a desaf√≠os espec√≠ficos del sector

**Conclusiones**
La implementaci√≥n exitosa requiere planificaci√≥n cuidadosa y adaptaci√≥n continua a las necesidades cambiantes.

¬øNecesitas ayuda con alg√∫n aspecto espec√≠fico de la implementaci√≥n?''',
  ];

  // Respuestas contextuales seg√∫n palabras clave
  String _getContextualResponse(String userMessage) {
    final lowerMessage = userMessage.toLowerCase();

    if (lowerMessage.contains('c√≥digo') ||
        lowerMessage.contains('programaci√≥n') ||
        lowerMessage.contains('programa')) {
      return '''Claro, hablemos sobre programaci√≥n. 

**Conceptos Fundamentales**
La programaci√≥n es el arte de resolver problemas mediante instrucciones que una computadora puede ejecutar. Los elementos clave incluyen:

‚Ä¢ **Algoritmos**: Secuencias l√≥gicas de pasos
‚Ä¢ **Estructuras de datos**: Organizaci√≥n eficiente de informaci√≥n
‚Ä¢ **Paradigmas**: Diferentes enfoques (POO, funcional, etc.)

**Mejores Pr√°cticas**
1. C√≥digo limpio y legible
2. Documentaci√≥n apropiada
3. Testing exhaustivo
4. Refactorizaci√≥n continua

**Lenguajes Populares**
Dependiendo de tu objetivo, lenguajes como Python, JavaScript, Java, o Dart (para Flutter) son excelentes opciones.

¬øHay alg√∫n lenguaje o concepto espec√≠fico sobre el que quieras aprender m√°s?''';
    }

    if (lowerMessage.contains('ayuda') || lowerMessage.contains('ayudar')) {
      return '''¬°Por supuesto que puedo ayudarte! Estoy aqu√≠ para asistirte con una amplia variedad de temas.

**Mis Capacidades**
Puedo ayudarte con:

üìö **Conocimiento General**
- Responder preguntas sobre diversos temas
- Explicar conceptos complejos de manera simple
- Proporcionar informaci√≥n actualizada

üíª **Programaci√≥n y Tecnolog√≠a**
- Ayuda con c√≥digo y debugging
- Explicaci√≥n de conceptos t√©cnicos
- Sugerencias de mejores pr√°cticas

‚úçÔ∏è **Escritura y Creatividad**
- Redacci√≥n y edici√≥n de textos
- Ideas creativas y brainstorming
- Estructuraci√≥n de contenido

üéØ **Productividad**
- Organizaci√≥n y planificaci√≥n
- Resoluci√≥n de problemas
- Consejos y recomendaciones

Por favor, cu√©ntame m√°s sobre lo que necesitas y estar√© encantado de asistirte de la mejor manera posible.''';
    }

    if (lowerMessage.contains('flutter') || lowerMessage.contains('dart')) {
      return '''¬°Excelente elecci√≥n! Flutter es un framework incre√≠blemente potente para desarrollo multiplataforma.

**¬øPor qu√© Flutter?**
‚Ä¢ Rendimiento nativo en iOS y Android
‚Ä¢ Hot Reload para desarrollo √°gil
‚Ä¢ Rica biblioteca de widgets personalizables
‚Ä¢ Comunidad activa y creciente

**Conceptos Clave**
1. **Widgets**: Todo en Flutter es un widget
2. **State Management**: Provider, Riverpod, Bloc, etc.
3. **Material Design & Cupertino**: Dise√±os nativos
4. **Dart Language**: Lenguaje moderno y eficiente

**Arquitectura Recomendada**
- Separaci√≥n de responsabilidades
- Clean Architecture
- Dependency Injection
- Testing comprehensivo

**Recursos √ötiles**
- Documentaci√≥n oficial de Flutter
- Paquetes en pub.dev
- Comunidad en Discord y Stack Overflow

¬øEn qu√© aspecto espec√≠fico de Flutter necesitas ayuda?''';
    }

    // Respuesta por defecto aleatoria
    return _sampleResponses[_random.nextInt(_sampleResponses.length)];
  }

  // Simular delay de respuesta con streaming
  Stream<String> generateResponse(String userMessage) async* {
    // Simular tiempo de "pensamiento"
    await Future.delayed(Duration(milliseconds: 500 + _random.nextInt(1000)));

    final response = _getContextualResponse(userMessage);
    final words = response.split(' ');

    // Simular escritura palabra por palabra
    StringBuffer currentText = StringBuffer();

    for (int i = 0; i < words.length; i++) {
      currentText.write(words[i]);
      if (i < words.length - 1) {
        currentText.write(' ');
      }

      yield currentText.toString();

      // Delay variable entre palabras para mayor realismo
      final delay = _random.nextInt(50) + 20;
      await Future.delayed(Duration(milliseconds: delay));

      // Pausas m√°s largas despu√©s de puntos y comas
      if (words[i].endsWith('.') ||
          words[i].endsWith(',') ||
          words[i].endsWith(':')) {
        await Future.delayed(
          Duration(milliseconds: 100 + _random.nextInt(200)),
        );
      }
    }
  }

  // Generar t√≠tulo para la conversaci√≥n basado en el primer mensaje
  String generateChatTitle(String firstMessage) {
    if (firstMessage.length <= 30) {
      return firstMessage;
    }

    // Tomar las primeras palabras significativas
    final words = firstMessage.split(' ');
    final significantWords = words.where((word) => word.length > 3).take(4);

    if (significantWords.isEmpty) {
      return '${words.take(3).join(' ')}...';
    }

    return '${significantWords.join(' ')}...';
  }

  // Sugerencias de seguimiento
  List<String> getSuggestedFollowUps(String lastAIMessage) {
    return [
      '¬øPuedes explicar m√°s sobre esto?',
      'Dame un ejemplo pr√°ctico',
      '¬øCu√°les son las alternativas?',
      'Profundiza en este tema',
    ];
  }

  /// Wrapper para compatibilidad con AssistantProvider.
  /// Convierte el stream de generateResponse(...) en un √∫nico String y lo entrega como Map.
  Future<Map<String, dynamic>> answerFromDocs(String userMessage) async {
    final buffer = StringBuffer();
    await for (final chunk in generateResponse(userMessage)) {
      // generateResponse ya va ‚Äústreameando‚Äù el texto; aqu√≠ acumulamos el final
      buffer
        ..clear()
        ..write(
          chunk,
        ); // chunk ya contiene el texto completo acumulado en tu implementaci√≥n
    }
    return {
      'ok': true,
      'text': buffer.toString(),
      'source': 'AIService.generateResponse',
    };
  }
}
